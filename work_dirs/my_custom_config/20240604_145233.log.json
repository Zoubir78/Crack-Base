{"env_info": "sys.platform: win32\nPython: 3.8.19 (default, Mar 20 2024, 19:55:45) [MSC v.1916 64 bit (AMD64)]\nCUDA available: False\nMSVC: Compilateur d'optimisation Microsoft (R) C/C++ version\u00a019.39.33523 pour x64\nGCC: n/a\nPyTorch: 2.3.0+cu118\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 201703\n  - MSVC 192930151\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=8.7.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, \n\nTorchVision: 0.18.0+cpu\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: MSVC 193933523\nMMCV CUDA Compiler: not available\nMMDetection: 2.25.2+4442b18", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet18')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=24,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=24,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CustomCocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='GaussNoise',\n        var_limit=(20.0, 60.0),\n        mean=0,\n        per_channel=False,\n        p=0.9),\n    dict(\n        type='RandomBrightnessContrast',\n        brightness_limit=[-0.2, 0.2],\n        contrast_limit=[-0.25, 0.25],\n        p=1.0),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=(3, 5), p=1.0),\n            dict(type='MedianBlur', blur_limit=(3, 5), p=1.0)\n        ],\n        p=0.3),\n    dict(\n        type='ShiftScaleRotate',\n        shift_limit=0.1,\n        scale_limit=(-0.3, 0.8),\n        rotate_limit=10,\n        interpolation=1,\n        border_mode=0,\n        value=0,\n        p=1),\n    dict(type='ImageCompression', quality_lower=30, quality_upper=50, p=0.95)\n]\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Albu',\n        transforms=[\n            dict(\n                type='GaussNoise',\n                var_limit=(20.0, 60.0),\n                mean=0,\n                per_channel=False,\n                p=0.9),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=[-0.2, 0.2],\n                contrast_limit=[-0.25, 0.25],\n                p=1.0),\n            dict(\n                type='OneOf',\n                transforms=[\n                    dict(type='Blur', blur_limit=(3, 5), p=1.0),\n                    dict(type='MedianBlur', blur_limit=(3, 5), p=1.0)\n                ],\n                p=0.3),\n            dict(\n                type='ShiftScaleRotate',\n                shift_limit=0.1,\n                scale_limit=(-0.3, 0.8),\n                rotate_limit=10,\n                interpolation=1,\n                border_mode=0,\n                value=0,\n                p=1),\n            dict(\n                type='ImageCompression',\n                quality_lower=30,\n                quality_upper=50,\n                p=0.95)\n        ],\n        bbox_params=dict(\n            type='BboxParams',\n            format='pascal_voc',\n            label_fields=['gt_labels'],\n            min_visibility=0.04,\n            filter_lost_elements=True),\n        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),\n        update_pad_shape=False,\n        skip_img_without_anno=True),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(\n        type='Collect',\n        keys=['img', 'jet', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img', 'szp']),\n            dict(type='Collect', keys=['img', 'jet'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=1,\n    train=dict(\n        type='CustomCocoDataset',\n        ann_file=\n        'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/configs/my_custom/grap/train/DEP/annotation_lcms_train.json',\n        img_prefix=\n        'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/configs/my_custom/grap/train',\n        jet_prefix=\n        'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/configs/my_custom/grap/train/DEP',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('non_classee', 'cable', 'passe_cable', 'lumiere', 'joint',\n                 'camera', 'prisme_sos_telephone', 'bouche_incendie',\n                 'reflecteur', 'prisme_issue_en_face',\n                 'indication_issue_de_secours', 'plaque_numerotee',\n                 'issue_de_secours', 'plaque_anneau', 'indication_id_sos',\n                 'issue_sos_telephone', 'panneau_signalisation', 'coffrage',\n                 'boitier_elec', 'non_definie_1', 'non_definie_2',\n                 'non_definie_3', 'non_definie_4', 'non_definie_5')),\n    val=dict(\n        type='CustomCocoDataset',\n        ann_file=\n        'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/configs/my_custom/grap/val/annotation_lcms_val.json',\n        img_prefix=\n        'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/configs/my_custom/grap/val/',\n        jet_prefix=\n        'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/configs/my_custom/grap/val/DEP',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('non_classee', 'cable', 'passe_cable', 'lumiere', 'joint',\n                 'camera', 'prisme_sos_telephone', 'bouche_incendie',\n                 'reflecteur', 'prisme_issue_en_face',\n                 'indication_issue_de_secours', 'plaque_numerotee',\n                 'issue_de_secours', 'plaque_anneau', 'indication_id_sos',\n                 'issue_sos_telephone', 'panneau_signalisation', 'coffrage',\n                 'boitier_elec', 'non_definie_1', 'non_definie_2',\n                 'non_definie_3', 'non_definie_4', 'non_definie_5')),\n    test=dict(\n        type='CustomCocoDataset',\n        ann_file=\n        'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/configs/my_custom/grap/test/annotation_lcms_test.json',\n        img_prefix=\n        'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/configs/my_custom/grap/test/',\n        jet_prefix=\n        'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/configs/my_custom/grap/test/DEP',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('non_classee', 'cable', 'passe_cable', 'lumiere', 'joint',\n                 'camera', 'prisme_sos_telephone', 'bouche_incendie',\n                 'reflecteur', 'prisme_issue_en_face',\n                 'indication_issue_de_secours', 'plaque_numerotee',\n                 'issue_de_secours', 'plaque_anneau', 'indication_id_sos',\n                 'issue_sos_telephone', 'panneau_signalisation', 'coffrage',\n                 'boitier_elec', 'non_definie_1', 'non_definie_2',\n                 'non_definie_3', 'non_definie_4', 'non_definie_5')))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'C:/Users/z.marouf-araibi/Desktop/dlta-ai/DLTA_AI_app/mmdetection/checkpoints/resnet152-394f9c45.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('non_classee', 'cable', 'passe_cable', 'lumiere', 'joint', 'camera',\n           'prisme_sos_telephone', 'bouche_incendie', 'reflecteur',\n           'prisme_issue_en_face', 'indication_issue_de_secours',\n           'plaque_numerotee', 'issue_de_secours', 'plaque_anneau',\n           'indication_id_sos', 'issue_sos_telephone', 'panneau_signalisation',\n           'coffrage', 'boitier_elec', 'non_definie_1', 'non_definie_2',\n           'non_definie_3', 'non_definie_4', 'non_definie_5')\nwork_dir = './work_dirs/my_custom_config'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 989051111, "exp_name": "my_custom_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "data_time": 0.31244, "loss_rpn_cls": 0.29688, "loss_rpn_bbox": 0.03878, "loss_cls": 0.25044, "acc": 95.46094, "loss_bbox": 0.01543, "loss_mask": 0.92821, "loss": 1.52975, "time": 21.32722}
